{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sistema de Acompanhamento de Dietas - NoSQL","text":"<p>Um sistema de banco de dados NoSQL para nutricionistas acompanharem a dieta dos seus pacientes, utilizando Neo4j (banco de grafos) e MongoDB (banco de documentos).</p>"},{"location":"#indice","title":"\u00cdndice","text":"<ul> <li>Vis\u00e3o Geral</li> <li>Estrutura do Projeto</li> <li>Configura\u00e7\u00e3o e Execu\u00e7\u00e3o</li> <li>Modelo de Dados<ul> <li>Modelo de Grafos (Neo4j)</li> <li>Modelo de Documentos (MongoDB)</li> </ul> </li> <li>Consultas<ul> <li>Consultas Neo4j (Cypher)</li> <li>Consultas MongoDB</li> </ul> </li> <li>Dump do Banco</li> </ul>"},{"location":"#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Este projeto implementa um sistema de acompanhamento de dietas que permite:</p> <ul> <li>Gerenciar pacientes e nutricionistas</li> <li>Registrar planos alimentares e refei\u00e7\u00f5es</li> <li>Acompanhar medidas corporais</li> <li>Monitorar a ades\u00e3o \u00e0s dietas</li> <li>Facilitar a comunica\u00e7\u00e3o entre paciente e nutricionista</li> <li>Sugerir receitas adequadas \u00e0s restri\u00e7\u00f5es alimentares</li> </ul> <p>O sistema utiliza dois tipos de SGBDs NoSQL:</p> <ul> <li>Neo4j: banco de dados de grafos para modelar os relacionamentos complexos entre entidades</li> <li>MongoDB: banco de documentos para armazenar informa\u00e7\u00f5es complexas aninhadas</li> </ul>"},{"location":"#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<pre><code>diet-tracking-app/\n\u251c\u2500\u2500 docker-compose.yml       # Configura\u00e7\u00e3o dos containers Docker (Neo4j e MongoDB)\n\u251c\u2500\u2500 load_data.py             # Script para carregar dados no Neo4j\n\u251c\u2500\u2500 load_mongodb_data.py     # Script para carregar dados no MongoDB\n\u251c\u2500\u2500 load_all_databases.py    # Script para configurar ambos os bancos\n\u251c\u2500\u2500 requirements.txt         # Depend\u00eancias Python\n\u2514\u2500\u2500 README.md                # Este arquivo\n</code></pre>"},{"location":"#configuracao-e-execucao","title":"Configura\u00e7\u00e3o e Execu\u00e7\u00e3o","text":""},{"location":"#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<ul> <li>Docker e Docker Compose</li> <li>Python 3.7+</li> <li>pip (gerenciador de pacotes Python)</li> </ul>"},{"location":"#instalacao","title":"Instala\u00e7\u00e3o","text":"<ol> <li> <p>Clone o reposit\u00f3rio ou copie os arquivos para seu diret\u00f3rio de trabalho</p> </li> <li> <p>Crie um ambiente virtual Python (opcional, mas recomendado)    <code>bash    python -m venv .venv    source .venv/bin/activate  # Linux/Mac    # ou    .venv\\Scripts\\activate     # Windows</code></p> </li> <li> <p>Instale as depend\u00eancias    <code>bash    pip install -r requirements.txt</code></p> </li> <li> <p>Execute o script de configura\u00e7\u00e3o completa (inicia os containers e carrega os dados)    <code>bash    python load_all_databases.py</code></p> </li> </ol> <p>Alternativamente, voc\u00ea pode executar cada etapa manualmente:</p> <p>```bash    # Inicie os containers Docker    docker-compose up -d</p> <p># Aguarde alguns segundos para os servi\u00e7os iniciarem    sleep 30</p> <p># Carregue os dados no Neo4j    python load_data.py</p> <p># Carregue os dados no MongoDB    python load_mongodb_data.py    ```</p> <ol> <li>Acesse as interfaces web:<ul> <li>Neo4j Browser: http://localhost:7474<ul> <li>Login: neo4j</li> <li>Senha: senha123</li> </ul> </li> <li>MongoDB Express: http://localhost:8081<ul> <li>Login: admin</li> <li>Senha: senha123</li> </ul> </li> </ul> </li> </ol>"},{"location":"#modelo-de-dados","title":"Modelo de Dados","text":""},{"location":"#modelo-de-grafos-neo4j","title":"Modelo de Grafos (Neo4j)","text":"<p>O modelo de grafos representa entidades como n\u00f3s e relacionamentos como arestas.</p>"},{"location":"#nos-entidades","title":"N\u00f3s (Entidades)","text":"<ul> <li>Nutricionista: Profissionais que orientam os pacientes</li> <li>Paciente: Pessoas que buscam orienta\u00e7\u00e3o nutricional</li> <li>PlanoAlimentar: Dietas elaboradas para os pacientes</li> <li>Alimento: Itens alimentares b\u00e1sicos com informa\u00e7\u00f5es nutricionais</li> <li>Receita: Combina\u00e7\u00f5es de alimentos com instru\u00e7\u00f5es de preparo</li> <li>Refeicao: Registros de alimenta\u00e7\u00e3o dos pacientes</li> <li>MedidaCorporal: Hist\u00f3rico de medi\u00e7\u00f5es (peso, IMC, etc.)</li> <li>Mensagem: Comunica\u00e7\u00f5es entre nutricionistas e pacientes</li> <li>Consulta: Agendamentos de atendimentos</li> </ul>"},{"location":"#relacionamentos","title":"Relacionamentos","text":"<ul> <li>ATENDE: Nutricionista \u2192 Paciente</li> <li>CRIA: Nutricionista \u2192 PlanoAlimentar</li> <li>SEGUE: Paciente \u2192 PlanoAlimentar</li> <li>INCLUI: PlanoAlimentar \u2192 Alimento</li> <li>RECOMENDA: PlanoAlimentar \u2192 Receita</li> <li>CONTEM: Receita \u2192 Alimento</li> <li>CONSOME: Paciente \u2192 Refeicao</li> <li>INCLUI: Refeicao \u2192 (Alimento | Receita)</li> <li>POSSUI: Paciente \u2192 MedidaCorporal</li> <li>ENVIA: (Nutricionista | Paciente) \u2192 Mensagem</li> <li>PARA: Mensagem \u2192 (Nutricionista | Paciente)</li> <li>AGENDA: Paciente \u2192 Consulta</li> <li>COM: Consulta \u2192 Nutricionista</li> </ul>"},{"location":"#modelo-de-documentos-mongodb","title":"Modelo de Documentos (MongoDB)","text":"<p>O modelo de documentos organiza os dados em cole\u00e7\u00f5es de documentos JSON.</p>"},{"location":"#colecoes","title":"Cole\u00e7\u00f5es","text":"<ol> <li>nutritionists: Informa\u00e7\u00f5es dos nutricionistas</li> <li>patients: Dados dos pacientes, incluindo refer\u00eancia ao nutricionista</li> <li>foods: Cadastro de alimentos com informa\u00e7\u00f5es nutricionais</li> <li>recipes: Receitas com ingredientes e instru\u00e7\u00f5es</li> <li>dietPlans: Planos alimentares com refer\u00eancias a pacientes, nutricionistas e alimentos/receitas recomendados</li> <li>meals: Refei\u00e7\u00f5es consumidas pelos pacientes</li> <li>measurements: Hist\u00f3rico de medidas corporais dos pacientes</li> <li>messages: Comunica\u00e7\u00f5es entre pacientes e nutricionistas</li> <li>appointments: Consultas agendadas e realizadas</li> </ol>"},{"location":"#consultas","title":"Consultas","text":""},{"location":"#consultas-neo4j-cypher","title":"Consultas Neo4j (Cypher)","text":""},{"location":"#1-encontrar-todos-os-pacientes-de-um-nutricionista-especifico","title":"1. Encontrar todos os pacientes de um nutricionista espec\u00edfico","text":"<pre><code>MATCH (n:Nutricionista {nome: \"Ana Silva\"})-[:ATENDE]-&gt;(p:Paciente)\nRETURN n.nome AS Nutricionista, p.nome AS Paciente, p.objetivo AS Objetivo\n</code></pre>"},{"location":"#2-encontrar-todas-as-refeicoes-de-um-paciente-em-um-periodo-especifico","title":"2. Encontrar todas as refei\u00e7\u00f5es de um paciente em um per\u00edodo espec\u00edfico","text":"<pre><code>MATCH (p:Paciente {nome: \"Jo\u00e3o Pereira\"})-[:CONSOME]-&gt;(r:Refeicao)\nWHERE r.data &gt;= \"2023-10-18\" AND r.data &lt;= \"2023-10-19\"\nRETURN p.nome AS Paciente, r.tipo AS TipoRefeicao, r.data AS Data,\n       r.calorias AS Calorias, r.adesao AS Adesao\nORDER BY r.data, r.hora\n</code></pre>"},{"location":"#3-calcular-a-soma-de-calorias-consumidas-por-um-paciente-em-um-dia","title":"3. Calcular a soma de calorias consumidas por um paciente em um dia","text":"<pre><code>MATCH (p:Paciente {nome: \"Jo\u00e3o Pereira\"})-[:CONSOME]-&gt;(r:Refeicao)\nWHERE r.data = \"2023-10-18\"\nRETURN p.nome AS Paciente, r.data AS Data, SUM(r.calorias) AS TotalCalorias\n</code></pre>"},{"location":"#4-encontrar-receitas-adequadas-para-pacientes-com-restricoes-alimentares","title":"4. Encontrar receitas adequadas para pacientes com restri\u00e7\u00f5es alimentares","text":"<pre><code>MATCH (p:Paciente)-[:SEGUE]-&gt;(pa:PlanoAlimentar)-[:RECOMENDA]-&gt;(r:Receita)\nWHERE \"Gl\u00faten\" IN p.restricoes\nRETURN p.nome AS Paciente, r.nome AS ReceitaAdequada, r.calorias AS Calorias\n</code></pre>"},{"location":"#5-identificar-pacientes-com-baixa-adesao-ao-plano-alimentar","title":"5. Identificar pacientes com baixa ades\u00e3o ao plano alimentar","text":"<pre><code>MATCH (p:Paciente)-[:CONSOME]-&gt;(r:Refeicao)\nWITH p, COUNT(r) AS totalRefeicoes,\n     SUM(CASE WHEN r.adesao = \"Completa\" THEN 1 ELSE 0 END) AS refeicoesCompletas\nWHERE (refeicoesCompletas * 1.0 / totalRefeicoes) &lt; 0.8\nRETURN p.nome AS Paciente, totalRefeicoes, refeicoesCompletas,\n       (refeicoesCompletas * 1.0 / totalRefeicoes) AS TaxaAdesao\nORDER BY TaxaAdesao\n</code></pre>"},{"location":"#6-rastrear-o-progresso-de-um-paciente-analisando-medidas-corporais","title":"6. Rastrear o progresso de um paciente analisando medidas corporais","text":"<pre><code>MATCH (p:Paciente {nome: \"Jo\u00e3o Pereira\"})-[:POSSUI]-&gt;(m:MedidaCorporal)\nRETURN p.nome AS Paciente, m.data AS Data, m.peso AS Peso, m.imc AS IMC,\n       m.gordura_corporal AS GorduraCorporal, m.cintura AS Cintura\nORDER BY m.data\n</code></pre>"},{"location":"#7-encontrar-os-alimentos-mais-recomendados-nos-planos-alimentares","title":"7. Encontrar os alimentos mais recomendados nos planos alimentares","text":"<pre><code>MATCH (pa:PlanoAlimentar)-[:INCLUI]-&gt;(a:Alimento)\nRETURN a.nome AS Alimento, a.grupo AS Grupo, COUNT(pa) AS NumeroDeRecomendacoes\nORDER BY NumeroDeRecomendacoes DESC\n</code></pre>"},{"location":"#8-analisar-a-comunicacao-entre-nutricionistas-e-pacientes","title":"8. Analisar a comunica\u00e7\u00e3o entre nutricionistas e pacientes","text":"<pre><code>MATCH (origem)-[:ENVIA]-&gt;(m:Mensagem)-[:PARA]-&gt;(destino)\nWHERE origem:Nutricionista OR destino:Nutricionista\nRETURN\n  CASE\n    WHEN origem:Nutricionista THEN origem.nome\n    ELSE origem.nome\n  END AS Remetente,\n  CASE\n    WHEN destino:Nutricionista THEN destino.nome\n    ELSE destino.nome\n  END AS Destinatario,\n  m.data AS Data, m.hora AS Hora, m.conteudo AS Mensagem\nORDER BY m.data, m.hora\n</code></pre>"},{"location":"#9-encontrar-receitas-que-contem-determinado-alimento","title":"9. Encontrar receitas que cont\u00eam determinado alimento","text":"<pre><code>MATCH (r:Receita)-[:CONTEM]-&gt;(a:Alimento {nome: \"Br\u00f3colis\"})\nRETURN r.nome AS Receita, r.calorias AS Calorias, r.dificuldade AS Dificuldade,\n       r.tempo_preparo AS TempoPreparo\n</code></pre>"},{"location":"#10-visualizar-proximas-consultas-agendadas","title":"10. Visualizar pr\u00f3ximas consultas agendadas","text":"<pre><code>MATCH (p:Paciente)-[:AGENDA]-&gt;(c:Consulta {status: \"Agendada\"})-[:COM]-&gt;(n:Nutricionista)\nRETURN p.nome AS Paciente, n.nome AS Nutricionista, c.data AS Data, c.hora AS Hora\nORDER BY c.data, c.hora\n</code></pre>"},{"location":"#consultas-mongodb","title":"Consultas MongoDB","text":""},{"location":"#1-encontrar-todos-os-pacientes-de-um-nutricionista-especifico_1","title":"1. Encontrar todos os pacientes de um nutricionista espec\u00edfico","text":"<pre><code>db.patients.find(\n    {nutricionista_id: 1},\n    {nome: 1, idade: 1, objetivo: 1, _id: 0}\n)\n</code></pre>"},{"location":"#2-buscar-todas-as-refeicoes-de-um-paciente-em-um-periodo-especifico","title":"2. Buscar todas as refei\u00e7\u00f5es de um paciente em um per\u00edodo espec\u00edfico","text":"<pre><code>db.meals.find(\n    {\n        paciente_id: 1,\n        data: {\n            $gte: ISODate(\"2023-10-18\"),\n            $lte: ISODate(\"2023-10-19\")\n        }\n    },\n    {tipo: 1, data: 1, hora: 1, calorias: 1, adesao: 1, _id: 0}\n).sort({data: 1, hora: 1})\n</code></pre>"},{"location":"#3-calcular-total-de-calorias-consumidas-por-dia","title":"3. Calcular total de calorias consumidas por dia","text":"<pre><code>db.meals.aggregate([\n    {$match: {paciente_id: 1}},\n    {\n        $group: {\n            _id: {$dateToString: {format: \"%Y-%m-%d\", date: \"$data\"}},\n            totalCalorias: {$sum: \"$calorias\"}\n        }\n    },\n    {$sort: {_id: 1}}\n])\n</code></pre>"},{"location":"#4-encontrar-receitas-adequadas-para-pacientes-com-restricoes","title":"4. Encontrar receitas adequadas para pacientes com restri\u00e7\u00f5es","text":"<pre><code>db.patients.aggregate([\n    {$match: {restricoes: \"Gl\u00faten\"}},\n    {\n        $lookup: {\n            from: \"dietPlans\",\n            localField: \"_id\",\n            foreignField: \"paciente_id\",\n            as: \"planos\"\n        }\n    },\n    {$unwind: \"$planos\"},\n    {\n        $lookup: {\n            from: \"recipes\",\n            localField: \"planos.receitas_recomendadas\",\n            foreignField: \"_id\",\n            as: \"receitas\"\n        }\n    },\n    {$unwind: \"$receitas\"},\n    {\n        $project: {\n            paciente: \"$nome\",\n            receita: \"$receitas.nome\",\n            calorias: \"$receitas.calorias\",\n            _id: 0\n        }\n    }\n])\n</code></pre>"},{"location":"#5-identificar-pacientes-com-baixa-adesao-ao-plano-alimentar_1","title":"5. Identificar pacientes com baixa ades\u00e3o ao plano alimentar","text":"<pre><code>db.meals.aggregate([\n    {\n        $group: {\n            _id: \"$paciente_id\",\n            totalRefeicoes: {$sum: 1},\n            refeicoesCompletas: {\n                $sum: {$cond: [{$eq: [\"$adesao\", \"Completa\"]}, 1, 0]}\n            }\n        }\n    },\n    {\n        $project: {\n            paciente_id: \"$_id\",\n            totalRefeicoes: 1,\n            refeicoesCompletas: 1,\n            taxaAdesao: {$divide: [\"$refeicoesCompletas\", \"$totalRefeicoes\"]},\n            _id: 0\n        }\n    },\n    {$match: {taxaAdesao: {$lt: 0.8}}},\n    {\n        $lookup: {\n            from: \"patients\",\n            localField: \"paciente_id\",\n            foreignField: \"_id\",\n            as: \"paciente\"\n        }\n    },\n    {$unwind: \"$paciente\"},\n    {\n        $project: {\n            nome: \"$paciente.nome\",\n            totalRefeicoes: 1,\n            refeicoesCompletas: 1,\n            taxaAdesao: 1\n        }\n    },\n    {$sort: {taxaAdesao: 1}}\n])\n</code></pre>"},{"location":"#6-rastrear-progresso-corporal-de-um-paciente","title":"6. Rastrear progresso corporal de um paciente","text":"<pre><code>db.measurements.find(\n    {paciente_id: 1},\n    {data: 1, peso: 1, imc: 1, gordura_corporal: 1, \"medidas.cintura\": 1, _id: 0}\n).sort({data: 1})\n</code></pre>"},{"location":"#7-encontrar-alimentos-mais-recomendados-nos-planos-alimentares","title":"7. Encontrar alimentos mais recomendados nos planos alimentares","text":"<pre><code>db.dietPlans.aggregate([\n    {$unwind: \"$alimentos_recomendados\"},\n    {\n        $group: {\n            _id: \"$alimentos_recomendados\",\n            contagem: {$sum: 1}\n        }\n    },\n    {\n        $lookup: {\n            from: \"foods\",\n            localField: \"_id\",\n            foreignField: \"_id\",\n            as: \"alimento\"\n        }\n    },\n    {$unwind: \"$alimento\"},\n    {\n        $project: {\n            nome: \"$alimento.nome\",\n            grupo: \"$alimento.grupo\",\n            recomendacoes: \"$contagem\",\n            _id: 0\n        }\n    },\n    {$sort: {recomendacoes: -1}}\n])\n</code></pre>"},{"location":"#8-analisar-comunicacao-entre-nutricionistas-e-pacientes","title":"8. Analisar comunica\u00e7\u00e3o entre nutricionistas e pacientes","text":"<pre><code>db.messages.aggregate([\n    {\n        $lookup: {\n            from: \"nutritionists\",\n            localField: \"de_id\",\n            foreignField: \"_id\",\n            as: \"nutricionista_de\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"patients\",\n            localField: \"de_id\",\n            foreignField: \"_id\",\n            as: \"paciente_de\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"nutritionists\",\n            localField: \"para_id\",\n            foreignField: \"_id\",\n            as: \"nutricionista_para\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"patients\",\n            localField: \"para_id\",\n            foreignField: \"_id\",\n            as: \"paciente_para\"\n        }\n    },\n    {\n        $project: {\n            remetente: {\n                $cond: {\n                    if: {$eq: [\"$de_tipo\", \"nutricionista\"]},\n                    then: {$arrayElemAt: [\"$nutricionista_de.nome\", 0]},\n                    else: {$arrayElemAt: [\"$paciente_de.nome\", 0]}\n                }\n            },\n            destinatario: {\n                $cond: {\n                    if: {$eq: [\"$para_tipo\", \"nutricionista\"]},\n                    then: {$arrayElemAt: [\"$nutricionista_para.nome\", 0]},\n                    else: {$arrayElemAt: [\"$paciente_para.nome\", 0]}\n                }\n            },\n            data: 1,\n            hora: 1,\n            conteudo: 1,\n            _id: 0\n        }\n    },\n    {$sort: {data: 1, hora: 1}}\n])\n</code></pre>"},{"location":"#9-encontrar-receitas-que-contem-determinado-ingrediente","title":"9. Encontrar receitas que cont\u00eam determinado ingrediente","text":"<pre><code>db.recipes.aggregate([\n    {$match: {\"ingredientes.food_id\": 4}},\n    {\n        $lookup: {\n            from: \"foods\",\n            localField: \"ingredientes.food_id\",\n            foreignField: \"_id\",\n            as: \"alimentos\"\n        }\n    },\n    {$match: {\"alimentos.nome\": \"Br\u00f3colis\"}},\n    {\n        $project: {\n            nome: 1,\n            calorias: 1,\n            dificuldade: 1,\n            tempo_preparo: 1,\n            _id: 0\n        }\n    }\n])\n</code></pre>"},{"location":"#10-visualizar-proximas-consultas-agendadas_1","title":"10. Visualizar pr\u00f3ximas consultas agendadas","text":"<pre><code>db.appointments.aggregate([\n    {$match: {status: \"Agendada\"}},\n    {\n        $lookup: {\n            from: \"patients\",\n            localField: \"paciente_id\",\n            foreignField: \"_id\",\n            as: \"paciente\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"nutritionists\",\n            localField: \"nutricionista_id\",\n            foreignField: \"_id\",\n            as: \"nutricionista\"\n        }\n    },\n    {$unwind: \"$paciente\"},\n    {$unwind: \"$nutricionista\"},\n    {\n        $project: {\n            paciente: \"$paciente.nome\",\n            nutricionista: \"$nutricionista.nome\",\n            data: 1,\n            hora: 1,\n            _id: 0\n        }\n    },\n    {$sort: {data: 1, hora: 1}}\n])\n</code></pre>"},{"location":"#dump-do-banco","title":"Dump do Banco","text":""},{"location":"#neo4j","title":"Neo4j","text":"<p>Para criar um dump do banco Neo4j:</p> <pre><code>docker exec diet_app_neo4j neo4j-admin dump --database=neo4j --to=/var/lib/neo4j/import/neo4j_dump.dump\ndocker cp diet_app_neo4j:/var/lib/neo4j/import/neo4j_dump.dump ./neo4j_dump.dump\n</code></pre>"},{"location":"#mongodb","title":"MongoDB","text":"<p>Para MongoDB, voc\u00ea pode usar o comando mongodump:</p> <pre><code>docker exec diet_app_mongodb mongodump --username admin --password senha123 --authenticationDatabase admin --db diet_app --out /data/db/mongodb_dump\ndocker cp diet_app_mongodb:/data/db/mongodb_dump ./mongodb_dump\n</code></pre> <p>Ou atrav\u00e9s do script Python:</p> <pre><code># Descomente a linha create_mongodb_dump() no arquivo load_mongodb_data.py\npython load_mongodb_data.py\n</code></pre>"},{"location":"setup/","title":"Setup Guide","text":""},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose</li> <li>Python 3.7+</li> </ul>"},{"location":"setup/#installation","title":"Installation","text":"<ol> <li>Clone the repository</li> <li>Run <code>pip install -r requirements.txt</code></li> <li>Run <code>python load_all_databases.py</code></li> </ol>"},{"location":"setup/#database-access","title":"Database Access","text":"<ul> <li>Neo4j: http://localhost:7474</li> <li>MongoDB: http://localhost:8081</li> </ul>"}]}