{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitHub Workflow para o Sistema de Acompanhamento de Dietas","text":"<p>Este documento descreve o fluxo de trabalho de CI/CD implementado para o projeto de Sistema de Acompanhamento de Dietas usando Neo4j e MongoDB.</p>"},{"location":"#visao-geral-do-workflow","title":"Vis\u00e3o Geral do Workflow","text":"<p>O fluxo de trabalho automatizado foi configurado para:</p> <ol> <li>Corrigir automaticamente problemas de formata\u00e7\u00e3o de c\u00f3digo</li> <li>Verificar a qualidade do c\u00f3digo</li> <li>Testar a integra\u00e7\u00e3o com os bancos de dados</li> <li>Construir imagens Docker</li> <li>Gerar documenta\u00e7\u00e3o</li> </ol>"},{"location":"#jobs-principais","title":"Jobs Principais","text":""},{"location":"#1-auto-formatacao-de-codigo","title":"1. Auto-formata\u00e7\u00e3o de C\u00f3digo","text":"<p>Este job executa automaticamente ferramentas para corrigir problemas comuns de estilo e formata\u00e7\u00e3o:</p> <ul> <li>isort: Ordena as importa\u00e7\u00f5es de acordo com o estilo do Black</li> <li>black: Formata o c\u00f3digo Python segundo padr\u00f5es PEP</li> <li>flake8-fixme: Corrige problemas comuns detectados pelo flake8</li> </ul> <p>Se alguma altera\u00e7\u00e3o for feita, o workflow faz commit e push automaticamente, o que evita ciclos de feedback desnecess\u00e1rios entre o CI/CD e os desenvolvedores.</p>"},{"location":"#2-verificacao-de-qualidade-de-codigo","title":"2. Verifica\u00e7\u00e3o de Qualidade de C\u00f3digo","text":"<p>Verifica se o c\u00f3digo est\u00e1 de acordo com as melhores pr\u00e1ticas usando:</p> <ul> <li>flake8: Detecta problemas de estilo e poss\u00edveis bugs</li> <li>isort: Verifica se as importa\u00e7\u00f5es est\u00e3o organizadas corretamente</li> <li>black: Confirma se o c\u00f3digo est\u00e1 formatado segundo o padr\u00e3o</li> <li>mypy: Realiza verifica\u00e7\u00e3o de tipos est\u00e1tica</li> </ul>"},{"location":"#3-testes-de-integracao","title":"3. Testes de Integra\u00e7\u00e3o","text":"<p>Testa a intera\u00e7\u00e3o com os bancos de dados:</p> <ul> <li>Inicia containers Docker para Neo4j e MongoDB</li> <li>Verifica conectividade e funcionalidades b\u00e1sicas</li> <li>Testa carregamento e consulta de dados</li> <li>Executa testes unit\u00e1rios com pytest</li> </ul>"},{"location":"#4-construcao-de-imagens-docker","title":"4. Constru\u00e7\u00e3o de Imagens Docker","text":"<p>Para produ\u00e7\u00e3o:</p> <ul> <li>Cria uma imagem Docker com todos os scripts e depend\u00eancias</li> <li>Publica a imagem no GitHub Container Registry</li> <li>Aplica tags apropriadas para versionamento</li> </ul>"},{"location":"#5-geracao-de-documentacao","title":"5. Gera\u00e7\u00e3o de Documenta\u00e7\u00e3o","text":"<p>Automatiza a cria\u00e7\u00e3o de documenta\u00e7\u00e3o:</p> <ul> <li>Gera documenta\u00e7\u00e3o API com pdoc3</li> <li>Cria um site de documenta\u00e7\u00e3o com MkDocs e Material theme</li> <li>Publica automaticamente no GitHub Pages</li> </ul>"},{"location":"#configuracao-local","title":"Configura\u00e7\u00e3o Local","text":"<p>Para usar o mesmo conjunto de ferramentas de qualidade de c\u00f3digo localmente:</p> <ol> <li> <p>Instale o pre-commit:    <code>bash    pip install pre-commit    pre-commit install</code></p> </li> <li> <p>Isso executar\u00e1 as mesmas verifica\u00e7\u00f5es e corre\u00e7\u00f5es autom\u00e1ticas cada vez que voc\u00ea fizer um commit.</p> </li> </ol>"},{"location":"#triggers-do-workflow","title":"Triggers do Workflow","text":"<p>O workflow \u00e9 acionado quando:</p> <ul> <li>Um push \u00e9 feito para as branches <code>main</code>, <code>master</code> ou <code>development</code></li> <li>Uma pull request \u00e9 aberta ou atualizada target as branches <code>main</code> ou <code>master</code></li> <li>Manualmente atrav\u00e9s da interface do GitHub (\"workflow_dispatch\")</li> </ul>"},{"location":"#configuracao-de-permissoes","title":"Configura\u00e7\u00e3o de Permiss\u00f5es","text":"<p>O workflow precisa das seguintes permiss\u00f5es:</p> <ul> <li><code>contents: write</code> - Para fazer commit de corre\u00e7\u00f5es autom\u00e1ticas</li> <li><code>pull-requests: write</code> - Para atualizar pull requests</li> <li><code>packages: write</code> - Para publicar imagens Docker (impl\u00edcito no GitHub Actions)</li> <li><code>pages: write</code> - Para publicar documenta\u00e7\u00e3o no GitHub Pages (configurado na action peaceiris/actions-gh-pages)</li> </ul>"},{"location":"#arquivos-de-configuracao-adicionais","title":"Arquivos de Configura\u00e7\u00e3o Adicionais","text":"<ul> <li>setup.cfg: Configura\u00e7\u00f5es para flake8, isort e mypy</li> <li>.pre-commit-config.yaml: Configura\u00e7\u00e3o para verifica\u00e7\u00f5es pr\u00e9-commit locais</li> <li>Dockerfile: Defini\u00e7\u00e3o da imagem Docker para o aplicativo</li> <li>test_database_setup.py: Testes para verificar a configura\u00e7\u00e3o e dados dos bancos</li> </ul>"},{"location":"#beneficios","title":"Benef\u00edcios","text":"<ul> <li>Produtividade aumentada: Corre\u00e7\u00e3o autom\u00e1tica de problemas comuns</li> <li>Qualidade consistente: Manuten\u00e7\u00e3o de padr\u00f5es em todo o projeto</li> <li>Integra\u00e7\u00e3o cont\u00ednua: Detec\u00e7\u00e3o precoce de problemas</li> <li>Entrega cont\u00ednua: Gera\u00e7\u00e3o de artefatos prontos para implanta\u00e7\u00e3o</li> <li>Documenta\u00e7\u00e3o atualizada: Documenta\u00e7\u00e3o sempre sincronizada com o c\u00f3digo</li> </ul>"},{"location":"setup/","title":"Setup Guide","text":""},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose</li> <li>Python 3.7+</li> </ul>"},{"location":"setup/#installation","title":"Installation","text":"<ol> <li>Clone the repository</li> <li>Run <code>pip install -r requirements.txt</code></li> <li>Run <code>python load_all_databases.py</code></li> </ol>"},{"location":"setup/#database-access","title":"Database Access","text":"<ul> <li>Neo4j: http://localhost:7474</li> <li>MongoDB: http://localhost:8081</li> </ul>"}]}