{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sistema de Acompanhamento de Dietas - NoSQL","text":"<p>Um sistema de banco de dados NoSQL para nutricionistas acompanharem a dieta dos seus pacientes, utilizando Neo4j (banco de grafos) e MongoDB (banco de documentos).</p>"},{"location":"#indice","title":"\u00cdndice","text":"<ul> <li>Vis\u00e3o Geral</li> <li>Estrutura do Projeto</li> <li>Modelo de Dados</li> <li>Modelo de Grafos (Neo4j)</li> <li>Modelo de Documentos (MongoDB)</li> <li>Consultas</li> <li>Consultas Neo4j (Cypher)</li> <li>Consultas MongoDB</li> <li>Configura\u00e7\u00e3o e Execu\u00e7\u00e3o</li> <li>Dump do Banco</li> </ul>"},{"location":"#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Este projeto implementa um sistema de acompanhamento de dietas que permite:</p> <ul> <li>Gerenciar pacientes e nutricionistas</li> <li>Registrar planos alimentares e refei\u00e7\u00f5es</li> <li>Acompanhar medidas corporais</li> <li>Monitorar a ades\u00e3o \u00e0s dietas</li> <li>Facilitar a comunica\u00e7\u00e3o entre paciente e nutricionista</li> <li>Sugerir receitas adequadas \u00e0s restri\u00e7\u00f5es alimentares</li> </ul> <p>O sistema utiliza dois tipos de SGBDs NoSQL:</p> <ul> <li>Neo4j: banco de dados de grafos para modelar os relacionamentos complexos entre entidades</li> <li>MongoDB: banco de documentos para armazenar informa\u00e7\u00f5es complexas aninhadas</li> </ul>"},{"location":"#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<pre><code>sistema-acompanhamento-dietas/\n\u251c\u2500\u2500 .github/workflows/                 # Workflows CI/CD e GitHub Pages\n\u251c\u2500\u2500 docs/                              # Documenta\u00e7\u00e3o\n\u251c\u2500\u2500 dumps/                             # Diret\u00f3rio para dumps\n\u251c\u2500\u2500 scripts/                           # Scripts Python\n\u251c\u2500\u2500 docker-compose.yml                 # Configura\u00e7\u00e3o Docker\n\u251c\u2500\u2500 Makefile                           # Automa\u00e7\u00e3o de tarefas\n\u251c\u2500\u2500 requirements.txt                   # Depend\u00eancias Python\n\u2514\u2500\u2500 README.md                          # Documenta\u00e7\u00e3o principal\n</code></pre>"},{"location":"#modelo-de-dados","title":"Modelo de Dados","text":"<p>O sistema utiliza dois modelos de dados diferentes para explorar as capacidades de cada tipo de banco de dados NoSQL.</p>"},{"location":"#modelo-de-grafos-neo4j","title":"Modelo de Grafos (Neo4j)","text":"<p>O modelo de grafos representa entidades como n\u00f3s e relacionamentos como arestas, permitindo modelar de forma natural as rela\u00e7\u00f5es complexas entre nutricionistas, pacientes, planos alimentares, etc.</p> <p>Ver detalhes do Modelo de Grafos</p>"},{"location":"#modelo-de-documentos-mongodb","title":"Modelo de Documentos (MongoDB)","text":"<p>O modelo de documentos organiza os dados em cole\u00e7\u00f5es de documentos JSON, permitindo armazenar estruturas aninhadas e flex\u00edveis.</p> <p>Ver detalhes do Modelo de Documentos</p>"},{"location":"#consultas","title":"Consultas","text":"<p>O sistema implementa diversas consultas para demonstrar as capacidades de cada banco de dados.</p>"},{"location":"#consultas-neo4j-cypher","title":"Consultas Neo4j (Cypher)","text":"<p>Consultas em linguagem Cypher que exploram as capacidades do Neo4j para navega\u00e7\u00e3o em grafos e an\u00e1lise de relacionamentos.</p> <p>Ver detalhes das Consultas Neo4j</p>"},{"location":"#consultas-mongodb","title":"Consultas MongoDB","text":"<p>Consultas utilizando a API de agrega\u00e7\u00e3o e consultas do MongoDB que exploram as capacidades de armazenamento e recupera\u00e7\u00e3o de documentos.</p> <p>Ver detalhes das Consultas MongoDB</p>"},{"location":"#configuracao-e-execucao","title":"Configura\u00e7\u00e3o e Execu\u00e7\u00e3o","text":""},{"location":"#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<ul> <li>Docker e Docker Compose</li> <li>Python 3.7+</li> <li>pip (gerenciador de pacotes Python)</li> </ul>"},{"location":"#instalacao","title":"Instala\u00e7\u00e3o","text":"<ol> <li> <p>Clone o reposit\u00f3rio ou copie os arquivos para seu diret\u00f3rio de trabalho</p> </li> <li> <p>Crie um ambiente virtual Python (opcional, mas recomendado)    <pre><code>python -m venv .venv\nsource .venv/bin/activate  # Linux/Mac\n# ou\n.venv\\Scripts\\activate     # Windows\n</code></pre></p> </li> <li> <p>Instale as depend\u00eancias    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Execute o script de configura\u00e7\u00e3o completa (inicia os containers e carrega os dados)    <pre><code>make setup\nmake load\n</code></pre></p> </li> </ol> <p>Alternativamente, voc\u00ea pode executar:    <pre><code>python load_all_databases.py\n</code></pre></p> <ol> <li>Acesse as interfaces web:<ul> <li>Neo4j Browser: http://localhost:7474<ul> <li>Login: neo4j</li> <li>Senha: senha123</li> </ul> </li> <li>MongoDB Express: http://localhost:8081<ul> <li>Login: admin</li> <li>Senha: senha123</li> </ul> </li> </ul> </li> </ol>"},{"location":"#dump-do-banco","title":"Dump do Banco","text":"<p>Para criar dumps dos bancos de dados, utilize o comando:</p> <pre><code>make dump\n</code></pre> <p>Ou para cada banco individualmente:</p> <pre><code>make dump-neo4j    # Apenas Neo4j\nmake dump-mongodb  # Apenas MongoDB\n</code></pre> <p>Os dumps ser\u00e3o armazenados no diret\u00f3rio <code>dumps/</code>.</p>"},{"location":"instalacao/","title":"Instala\u00e7\u00e3o e Configura\u00e7\u00e3o","text":""},{"location":"instalacao/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<ul> <li>Docker e Docker Compose</li> <li>Python 3.7+</li> <li>pip (gerenciador de pacotes Python)</li> </ul>"},{"location":"instalacao/#instalacao","title":"Instala\u00e7\u00e3o","text":"<ol> <li> <p>Clone o reposit\u00f3rio ou copie os arquivos para seu diret\u00f3rio de trabalho</p> </li> <li> <p>Crie um ambiente virtual Python (opcional, mas recomendado)    ```bash    python -m venv .venv    source .venv/bin/activate  # Linux/Mac    # ou    .venv\\Scripts\\activate     # Windows</p> </li> </ol>"},{"location":"consultas/mongodb/","title":"Consultas MongoDB","text":"<p>Nesta se\u00e7\u00e3o, apresentamos as consultas implementadas no MongoDB. Cada consulta \u00e9 descrita com seu objetivo, o c\u00f3digo em JavaScript e uma explica\u00e7\u00e3o de como a consulta funciona.</p>"},{"location":"consultas/mongodb/#1-encontrar-todos-os-pacientes-de-um-nutricionista-especifico","title":"1. Encontrar todos os pacientes de um nutricionista espec\u00edfico","text":"<p>Objetivo: Listar todos os pacientes atendidos por um determinado nutricionista.</p> <pre><code>db.patients.find(\n    {nutricionista_id: 1},\n    {nome: 1, idade: 1, objetivo: 1, _id: 0}\n)\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta busca todos os documentos na cole\u00e7\u00e3o <code>patients</code> onde o campo <code>nutricionista_id</code> \u00e9 igual a 1. O segundo par\u00e2metro especifica os campos a serem retornados (<code>nome</code>, <code>idade</code>, e <code>objetivo</code>), excluindo o <code>_id</code>.</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/mongodb/#2-buscar-todas-as-refeicoes-de-um-paciente-em-um-periodo-especifico","title":"2. Buscar todas as refei\u00e7\u00f5es de um paciente em um per\u00edodo espec\u00edfico","text":"<p>Objetivo: Listar todas as refei\u00e7\u00f5es de um paciente em um intervalo de datas espec\u00edfico.</p> <pre><code>db.meals.find(\n    {\n        paciente_id: 1,\n        data: {\n            $gte: ISODate(\"2023-10-18\"),\n            $lte: ISODate(\"2023-10-19\")\n        }\n    },\n    {tipo: 1, data: 1, hora: 1, calorias: 1, adesao: 1, _id: 0}\n).sort({data: 1, hora: 1})\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta busca documentos na cole\u00e7\u00e3o <code>meals</code> onde o <code>paciente_id</code> \u00e9 1 e a data est\u00e1 entre 18/10/2023 e 19/10/2023. Retorna os campos especificados e ordena os resultados por data e hora.</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/mongodb/#3-calcular-total-de-calorias-consumidas-por-dia","title":"3. Calcular total de calorias consumidas por dia","text":"<p>Objetivo: Calcular o total de calorias consumidas por um paciente, agrupadas por dia.</p> <pre><code>db.meals.aggregate([\n    {$match: {paciente_id: 1}},\n    {\n        $group: {\n            _id: {$dateToString: {format: \"%Y-%m-%d\", date: \"$data\"}},\n            totalCalorias: {$sum: \"$calorias\"}\n        }\n    },\n    {$sort: {_id: 1}}\n])\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta usa o framework de agrega\u00e7\u00e3o do MongoDB para: 1. Filtrar refei\u00e7\u00f5es do paciente com ID 1 2. Agrupar os resultados por data (convertida para formato YYYY-MM-DD) 3. Calcular a soma das calorias para cada dia 4. Ordenar os resultados por data</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/mongodb/#4-encontrar-receitas-adequadas-para-pacientes-com-restricoes","title":"4. Encontrar receitas adequadas para pacientes com restri\u00e7\u00f5es","text":"<p>Objetivo: Identificar receitas recomendadas em planos alimentares para pacientes com restri\u00e7\u00f5es espec\u00edficas.</p> <pre><code>db.patients.aggregate([\n    {$match: {restricoes: \"Gl\u00faten\"}},\n    {\n        $lookup: {\n            from: \"dietPlans\",\n            localField: \"_id\",\n            foreignField: \"paciente_id\",\n            as: \"planos\"\n        }\n    },\n    {$unwind: \"$planos\"},\n    {\n        $lookup: {\n            from: \"recipes\",\n            localField: \"planos.receitas_recomendadas\",\n            foreignField: \"_id\",\n            as: \"receitas\"\n        }\n    },\n    {$unwind: \"$receitas\"},\n    {\n        $project: {\n            paciente: \"$nome\",\n            receita: \"$receitas.nome\",\n            calorias: \"$receitas.calorias\",\n            _id: 0\n        }\n    }\n])\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta complexa usa o framework de agrega\u00e7\u00e3o para: 1. Encontrar pacientes com restri\u00e7\u00e3o de \"Gl\u00faten\" 2. Juntar os dados com a cole\u00e7\u00e3o <code>dietPlans</code> para encontrar os planos alimentares desses pacientes 3. Desempacotar o array de planos 4. Juntar com a cole\u00e7\u00e3o <code>recipes</code> para encontrar as receitas recomendadas 5. Desempacotar o array de receitas 6. Projetar apenas os campos desejados</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/mongodb/#5-identificar-pacientes-com-baixa-adesao-ao-plano-alimentar","title":"5. Identificar pacientes com baixa ades\u00e3o ao plano alimentar","text":"<p>Objetivo: Encontrar pacientes que t\u00eam baixa ades\u00e3o (menos de 80%) ao plano alimentar.</p> <pre><code>db.meals.aggregate([\n    {\n        $group: {\n            _id: \"$paciente_id\",\n            totalRefeicoes: {$sum: 1},\n            refeicoesCompletas: {\n                $sum: {$cond: [{$eq: [\"$adesao\", \"Completa\"]}, 1, 0]}\n            }\n        }\n    },\n    {\n        $project: {\n            paciente_id: \"$_id\",\n            totalRefeicoes: 1,\n            refeicoesCompletas: 1,\n            taxaAdesao: {$divide: [\"$refeicoesCompletas\", \"$totalRefeicoes\"]},\n            _id: 0\n        }\n    },\n    {$match: {taxaAdesao: {$lt: 0.8}}},\n    {\n        $lookup: {\n            from: \"patients\",\n            localField: \"paciente_id\",\n            foreignField: \"_id\",\n            as: \"paciente\"\n        }\n    },\n    {$unwind: \"$paciente\"},\n    {\n        $project: {\n            nome: \"$paciente.nome\",\n            totalRefeicoes: 1,\n            refeicoesCompletas: 1,\n            taxaAdesao: 1\n        }\n    },\n    {$sort: {taxaAdesao: 1}}\n])\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta: 1. Agrupa as refei\u00e7\u00f5es por paciente, contando o total de refei\u00e7\u00f5es e quantas foram completas 2. Calcula a taxa de ades\u00e3o (refei\u00e7\u00f5es completas / total de refei\u00e7\u00f5es) 3. Filtra apenas os pacientes com taxa de ades\u00e3o abaixo de 0,8 (80%) 4. Busca os dados do paciente na cole\u00e7\u00e3o <code>patients</code> 5. Projeta os campos desejados e ordena por taxa de ades\u00e3o</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/mongodb/#6-rastrear-progresso-corporal-de-um-paciente","title":"6. Rastrear progresso corporal de um paciente","text":"<p>Objetivo: Analisar a evolu\u00e7\u00e3o das medidas corporais de um paciente ao longo do tempo.</p> <pre><code>db.measurements.find(\n    {paciente_id: 1},\n    {data: 1, peso: 1, imc: 1, gordura_corporal: 1, \"medidas.cintura\": 1, _id: 0}\n).sort({data: 1})\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta recupera todas as medidas corporais do paciente com ID 1, incluindo a medida de cintura que est\u00e1 aninhada no objeto <code>medidas</code>. Os resultados s\u00e3o ordenados por data.</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/mongodb/#7-encontrar-alimentos-mais-recomendados-nos-planos-alimentares","title":"7. Encontrar alimentos mais recomendados nos planos alimentares","text":"<p>Objetivo: Identificar quais alimentos s\u00e3o mais frequentemente recomendados nos planos alimentares.</p> <pre><code>db.dietPlans.aggregate([\n    {$unwind: \"$alimentos_recomendados\"},\n    {\n        $group: {\n            _id: \"$alimentos_recomendados\",\n            contagem: {$sum: 1}\n        }\n    },\n    {\n        $lookup: {\n            from: \"foods\",\n            localField: \"_id\",\n            foreignField: \"_id\",\n            as: \"alimento\"\n        }\n    },\n    {$unwind: \"$alimento\"},\n    {\n        $project: {\n            nome: \"$alimento.nome\",\n            grupo: \"$alimento.grupo\",\n            recomendacoes: \"$contagem\",\n            _id: 0\n        }\n    },\n    {$sort: {recomendacoes: -1}}\n])\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta: 1. Desempacota o array <code>alimentos_recomendados</code> de cada plano alimentar 2. Agrupa por ID de alimento e conta quantas vezes cada alimento aparece 3. Busca os detalhes de cada alimento na cole\u00e7\u00e3o <code>foods</code> 4. Projeta os campos desejados e ordena por n\u00famero de recomenda\u00e7\u00f5es em ordem decrescente</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/mongodb/#8-analisar-comunicacao-entre-nutricionistas-e-pacientes","title":"8. Analisar comunica\u00e7\u00e3o entre nutricionistas e pacientes","text":"<p>Objetivo: Visualizar todas as mensagens trocadas entre nutricionistas e pacientes.</p> <pre><code>db.messages.aggregate([\n    {\n        $lookup: {\n            from: \"nutritionists\",\n            localField: \"de_id\",\n            foreignField: \"_id\",\n            as: \"nutricionista_de\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"patients\",\n            localField: \"de_id\",\n            foreignField: \"_id\",\n            as: \"paciente_de\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"nutritionists\",\n            localField: \"para_id\",\n            foreignField: \"_id\",\n            as: \"nutricionista_para\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"patients\",\n            localField: \"para_id\",\n            foreignField: \"_id\",\n            as: \"paciente_para\"\n        }\n    },\n    {\n        $project: {\n            remetente: {\n                $cond: {\n                    if: {$eq: [\"$de_tipo\", \"nutricionista\"]},\n                    then: {$arrayElemAt: [\"$nutricionista_de.nome\", 0]},\n                    else: {$arrayElemAt: [\"$paciente_de.nome\", 0]}\n                }\n            },\n            destinatario: {\n                $cond: {\n                    if: {$eq: [\"$para_tipo\", \"nutricionista\"]},\n                    then: {$arrayElemAt: [\"$nutricionista_para.nome\", 0]},\n                    else: {$arrayElemAt: [\"$paciente_para.nome\", 0]}\n                }\n            },\n            data: 1,\n            hora: 1,\n            conteudo: 1,\n            _id: 0\n        }\n    },\n    {$sort: {data: 1, hora: 1}}\n])\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta complexa: 1. Junta dados com as cole\u00e7\u00f5es <code>nutritionists</code> e <code>patients</code> para encontrar os nomes dos remetentes e destinat\u00e1rios 2. Usa condi\u00e7\u00f5es para determinar se o remetente/destinat\u00e1rio \u00e9 um nutricionista ou paciente 3. Projeta os campos desejados e ordena cronologicamente</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/mongodb/#9-encontrar-receitas-que-contem-determinado-ingrediente","title":"9. Encontrar receitas que cont\u00eam determinado ingrediente","text":"<p>Objetivo: Listar todas as receitas que cont\u00eam um alimento espec\u00edfico.</p> <pre><code>db.recipes.aggregate([\n    {$match: {\"ingredientes.food_id\": 4}},\n    {\n        $lookup: {\n            from: \"foods\",\n            localField: \"ingredientes.food_id\",\n            foreignField: \"_id\",\n            as: \"alimentos\"\n        }\n    },\n    {$match: {\"alimentos.nome\": \"Br\u00f3colis\"}},\n    {\n        $project: {\n            nome: 1,\n            calorias: 1,\n            dificuldade: 1,\n            tempo_preparo: 1,\n            _id: 0\n        }\n    }\n])\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta: 1. Filtra receitas que t\u00eam um ingrediente com <code>food_id</code> igual a 4 2. Busca os detalhes dos alimentos na cole\u00e7\u00e3o <code>foods</code> 3. Filtra novamente para garantir que o alimento seja \"Br\u00f3colis\" 4. Projeta os campos desejados</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/mongodb/#10-visualizar-proximas-consultas-agendadas","title":"10. Visualizar pr\u00f3ximas consultas agendadas","text":"<p>Objetivo: Listar todas as consultas futuras agendadas entre pacientes e nutricionistas.</p> <pre><code>db.appointments.aggregate([\n    {$match: {status: \"Agendada\"}},\n    {\n        $lookup: {\n            from: \"patients\",\n            localField: \"paciente_id\",\n            foreignField: \"_id\",\n            as: \"paciente\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"nutritionists\",\n            localField: \"nutricionista_id\",\n            foreignField: \"_id\",\n            as: \"nutricionista\"\n        }\n    },\n    {$unwind: \"$paciente\"},\n    {$unwind: \"$nutricionista\"},\n    {\n        $project: {\n            paciente: \"$paciente.nome\",\n            nutricionista: \"$nutricionista.nome\",\n            data: 1,\n            hora: 1,\n            _id: 0\n        }\n    },\n    {$sort: {data: 1, hora: 1}}\n])\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta: 1. Filtra consultas com status \"Agendada\" 2. Busca os dados do paciente e do nutricionista em suas respectivas cole\u00e7\u00f5es 3. Desempacota os arrays resultantes 4. Projeta os campos desejados e ordena cronologicamente</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/neo4j/","title":"Consultas Neo4j (Cypher)","text":"<p>Nesta se\u00e7\u00e3o, apresentamos as consultas implementadas utilizando a linguagem Cypher para o banco de dados Neo4j. Cada consulta \u00e9 descrita com seu objetivo, o c\u00f3digo Cypher e uma explica\u00e7\u00e3o de como a consulta funciona.</p>"},{"location":"consultas/neo4j/#1-encontrar-todos-os-pacientes-de-um-nutricionista-especifico","title":"1. Encontrar todos os pacientes de um nutricionista espec\u00edfico","text":"<p>Objetivo: Listar todos os pacientes atendidos por um determinado nutricionista, incluindo o objetivo do paciente.</p> <pre><code>MATCH (n:Nutricionista {nome: \"Ana Silva\"})-[:ATENDE]-&gt;(p:Paciente)\nRETURN n.nome AS Nutricionista, p.nome AS Paciente, p.objetivo AS Objetivo\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta encontra o nutricionista \"Ana Silva\" e percorre o relacionamento <code>ATENDE</code> para encontrar todos os seus pacientes. Para cada paciente, retornamos o nome do nutricionista, o nome do paciente e seu objetivo de tratamento.</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/neo4j/#2-encontrar-todas-as-refeicoes-de-um-paciente-em-um-periodo-especifico","title":"2. Encontrar todas as refei\u00e7\u00f5es de um paciente em um per\u00edodo espec\u00edfico","text":"<p>Objetivo: Listar todas as refei\u00e7\u00f5es de um paciente em um intervalo de datas espec\u00edfico.</p> <pre><code>MATCH (p:Paciente {nome: \"Jo\u00e3o Pereira\"})-[:CONSOME]-&gt;(r:Refeicao)\nWHERE r.data &gt;= \"2023-10-18\" AND r.data &lt;= \"2023-10-19\"\nRETURN p.nome AS Paciente, r.tipo AS TipoRefeicao, r.data AS Data,\n       r.calorias AS Calorias, r.adesao AS Adesao\nORDER BY r.data, r.hora\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta localiza o paciente \"Jo\u00e3o Pereira\" e todas as refei\u00e7\u00f5es que ele consumiu. Filtramos apenas as refei\u00e7\u00f5es que ocorreram entre 18/10/2023 e 19/10/2023. Os resultados s\u00e3o ordenados por data e hora.</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/neo4j/#3-calcular-a-soma-de-calorias-consumidas-por-um-paciente-em-um-dia","title":"3. Calcular a soma de calorias consumidas por um paciente em um dia","text":"<p>Objetivo: Calcular o total de calorias consumidas por um paciente em um dia espec\u00edfico.</p> <pre><code>MATCH (p:Paciente {nome: \"Jo\u00e3o Pereira\"})-[:CONSOME]-&gt;(r:Refeicao)\nWHERE r.data = \"2023-10-18\"\nRETURN p.nome AS Paciente, r.data AS Data, SUM(r.calorias) AS TotalCalorias\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta encontra todas as refei\u00e7\u00f5es consumidas pelo paciente \"Jo\u00e3o Pereira\" na data 18/10/2023 e soma o valor de calorias para calcular o total consumido nesse dia.</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/neo4j/#4-encontrar-receitas-adequadas-para-pacientes-com-restricoes-alimentares","title":"4. Encontrar receitas adequadas para pacientes com restri\u00e7\u00f5es alimentares","text":"<p>Objetivo: Identificar receitas recomendadas em planos alimentares para pacientes com restri\u00e7\u00f5es espec\u00edficas.</p> <pre><code>MATCH (p:Paciente)-[:SEGUE]-&gt;(pa:PlanoAlimentar)-[:RECOMENDA]-&gt;(r:Receita)\nWHERE \"Gl\u00faten\" IN p.restricoes\nRETURN p.nome AS Paciente, r.nome AS ReceitaAdequada, r.calorias AS Calorias\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta encontra todos os pacientes que t\u00eam \"Gl\u00faten\" como uma de suas restri\u00e7\u00f5es alimentares, depois localiza os planos alimentares que eles seguem e, finalmente, identifica as receitas recomendadas nesses planos.</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/neo4j/#5-identificar-pacientes-com-baixa-adesao-ao-plano-alimentar","title":"5. Identificar pacientes com baixa ades\u00e3o ao plano alimentar","text":"<p>Objetivo: Encontrar pacientes que t\u00eam baixa ades\u00e3o (menos de 80%) ao plano alimentar, com base nos registros de refei\u00e7\u00f5es.</p> <pre><code>MATCH (p:Paciente)-[:CONSOME]-&gt;(r:Refeicao)\nWITH p, COUNT(r) AS totalRefeicoes,\n     SUM(CASE WHEN r.adesao = \"Completa\" THEN 1 ELSE 0 END) AS refeicoesCompletas\nWHERE (refeicoesCompletas * 1.0 / totalRefeicoes) &lt; 0.8\nRETURN p.nome AS Paciente, totalRefeicoes, refeicoesCompletas,\n       (refeicoesCompletas * 1.0 / totalRefeicoes) AS TaxaAdesao\nORDER BY TaxaAdesao\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta conta o n\u00famero total de refei\u00e7\u00f5es para cada paciente e quantas dessas refei\u00e7\u00f5es foram marcadas como \"Completa\". Depois, calcula a taxa de ades\u00e3o (refei\u00e7\u00f5es completas dividido pelo total de refei\u00e7\u00f5es) e filtra apenas os pacientes com taxa menor que 0,8 (80%).</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/neo4j/#6-rastrear-o-progresso-de-um-paciente-analisando-medidas-corporais","title":"6. Rastrear o progresso de um paciente analisando medidas corporais","text":"<p>Objetivo: Analisar a evolu\u00e7\u00e3o das medidas corporais de um paciente ao longo do tempo.</p> <pre><code>MATCH (p:Paciente {nome: \"Jo\u00e3o Pereira\"})-[:POSSUI]-&gt;(m:MedidaCorporal)\nRETURN p.nome AS Paciente, m.data AS Data, m.peso AS Peso, m.imc AS IMC,\n       m.gordura_corporal AS GorduraCorporal, m.cintura AS Cintura\nORDER BY m.data\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta recupera todas as medidas corporais registradas para o paciente \"Jo\u00e3o Pereira\" e as ordena por data, permitindo visualizar seu progresso ao longo do tempo.</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/neo4j/#7-encontrar-os-alimentos-mais-recomendados-nos-planos-alimentares","title":"7. Encontrar os alimentos mais recomendados nos planos alimentares","text":"<p>Objetivo: Identificar quais alimentos s\u00e3o mais frequentemente recomendados nos planos alimentares, agrupados por grupo alimentar.</p> <pre><code>MATCH (pa:PlanoAlimentar)-[:INCLUI]-&gt;(a:Alimento)\nRETURN a.nome AS Alimento, a.grupo AS Grupo, COUNT(pa) AS NumeroDeRecomendacoes\nORDER BY NumeroDeRecomendacoes DESC\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta conta quantas vezes cada alimento aparece como recomendado em planos alimentares. Os resultados s\u00e3o agrupados por alimento e ordenados pelo n\u00famero de recomenda\u00e7\u00f5es em ordem decrescente.</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/neo4j/#8-analisar-a-comunicacao-entre-nutricionistas-e-pacientes","title":"8. Analisar a comunica\u00e7\u00e3o entre nutricionistas e pacientes","text":"<p>Objetivo: Visualizar todas as mensagens trocadas entre nutricionistas e pacientes, ordenadas cronologicamente.</p> <pre><code>MATCH (origem)-[:ENVIA]-&gt;(m:Mensagem)-[:PARA]-&gt;(destino)\nWHERE origem:Nutricionista OR destino:Nutricionista\nRETURN\n  CASE\n    WHEN origem:Nutricionista THEN origem.nome\n    ELSE origem.nome\n  END AS Remetente,\n  CASE\n    WHEN destino:Nutricionista THEN destino.nome\n    ELSE destino.nome\n  END AS Destinatario,\n  m.data AS Data, m.hora AS Hora, m.conteudo AS Mensagem\nORDER BY m.data, m.hora\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta recupera todas as mensagens onde o remetente ou o destinat\u00e1rio \u00e9 um nutricionista. Utiliza express\u00f5es CASE para formatar adequadamente os nomes dos remetentes e destinat\u00e1rios, independentemente se s\u00e3o nutricionistas ou pacientes.</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/neo4j/#9-encontrar-receitas-que-contem-determinado-alimento","title":"9. Encontrar receitas que cont\u00eam determinado alimento","text":"<p>Objetivo: Listar todas as receitas que cont\u00eam um alimento espec\u00edfico.</p> <pre><code>MATCH (r:Receita)-[:CONTEM]-&gt;(a:Alimento {nome: \"Br\u00f3colis\"})\nRETURN r.nome AS Receita, r.calorias AS Calorias, r.dificuldade AS Dificuldade,\n       r.tempo_preparo AS TempoPreparo\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta busca todas as receitas que cont\u00eam \"Br\u00f3colis\" como um de seus ingredientes, exibindo detalhes como calorias, n\u00edvel de dificuldade e tempo de preparo.</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"consultas/neo4j/#10-visualizar-proximas-consultas-agendadas","title":"10. Visualizar pr\u00f3ximas consultas agendadas","text":"<p>Objetivo: Listar todas as consultas futuras agendadas entre pacientes e nutricionistas.</p> <pre><code>MATCH (p:Paciente)-[:AGENDA]-&gt;(c:Consulta {status: \"Agendada\"})-[:COM]-&gt;(n:Nutricionista)\nRETURN p.nome AS Paciente, n.nome AS Nutricionista, c.data AS Data, c.hora AS Hora\nORDER BY c.data, c.hora\n</code></pre> <p>Explica\u00e7\u00e3o: Esta consulta encontra todas as consultas com status \"Agendada\", mostrando o paciente, o nutricionista, a data e a hora da consulta. Os resultados s\u00e3o ordenados cronologicamente.</p> <p>Resultado: Veja a imagem do resultado</p>"},{"location":"modelagem/","title":"Modelagem de Dados","text":"<p>O Sistema de Acompanhamento de Dietas utiliza dois tipos diferentes de bancos de dados NoSQL para demonstrar as capacidades e caracter\u00edsticas espec\u00edficas de cada um:</p>"},{"location":"modelagem/#bancos-de-dados-utilizados","title":"Bancos de Dados Utilizados","text":"<ol> <li>Neo4j (Banco de Dados de Grafos)</li> <li>Utilizado para modelar relacionamentos complexos entre entidades</li> <li>Permite consultas baseadas em padr\u00f5es de grafos</li> <li> <p>Ideal para dados altamente conectados</p> </li> <li> <p>MongoDB (Banco de Dados de Documentos)</p> </li> <li>Utilizado para armazenar documentos complexos com estrutura flex\u00edvel</li> <li>Permite consultas e agrega\u00e7\u00f5es poderosas</li> <li>Ideal para dados aninhados e esquema flex\u00edvel</li> </ol>"},{"location":"modelagem/#modelos-implementados","title":"Modelos Implementados","text":"<p>Clique nos links abaixo para ver os detalhes de cada modelo:</p> <ul> <li>Modelo de Grafos (Neo4j) - Representa entidades como n\u00f3s e relacionamentos como arestas</li> <li>Modelo de Documentos (MongoDB) - Organiza os dados em cole\u00e7\u00f5es de documentos JSON</li> </ul>"},{"location":"modelagem/#diagrama-conceitual","title":"Diagrama Conceitual","text":"<p>O diagrama abaixo mostra uma vis\u00e3o conceitual das principais entidades do sistema:</p> <p>```mermaid graph TD     Nutricionista --&gt; |atende| Paciente     Nutricionista --&gt; |cria| PlanoAlimentar     Paciente --&gt; |segue| PlanoAlimentar     PlanoAlimentar --&gt; |inclui| Alimento     PlanoAlimentar --&gt; |recomenda| Receita     Receita --&gt; |cont\u00e9m| Alimento     Paciente --&gt; |consome| Refeicao     Refeicao --&gt; |inclui| Alimento     Refeicao --&gt; |inclui| Receita     Paciente --&gt; |possui| MedidaCorporal     Paciente -.-&gt; |troca mensagens| Nutricionista     Paciente --&gt; |agenda| Consulta     Consulta --&gt; |com| Nutricionista</p>"},{"location":"modelagem/documentos/","title":"Modelo de Documentos (MongoDB)","text":"<p>O modelo de documentos para nosso Sistema de Acompanhamento de Dietas utiliza o MongoDB, um banco de dados NoSQL orientado a documentos que armazena dados em formato JSON-like (BSON). Esta abordagem \u00e9 particularmente \u00fatil para representar estruturas aninhadas e quando a flexibilidade de esquema \u00e9 importante.</p>"},{"location":"modelagem/documentos/#diagrama-do-modelo","title":"Diagrama do Modelo","text":"<p>O diagrama abaixo ilustra o modelo de dados em formato de documentos:</p> <pre><code>classDiagram\n    class nutritionists {\n        _id: ObjectId\n        nome: String\n        especialidade: String\n        experiencia: Number\n        email: String\n        telefone: String\n    }\n\n    class patients {\n        _id: ObjectId\n        nome: String\n        idade: Number\n        genero: String\n        altura: Number\n        peso_inicial: Number\n        email: String\n        telefone: String\n        restricoes: Array\n        alergias: Array\n        objetivo: String\n        nutricionista_id: ObjectId\n    }\n\n    class foods {\n        _id: ObjectId\n        nome: String\n        porcao: String\n        calorias: Number\n        proteinas: Number\n        carboidratos: Number\n        gorduras: Number\n        fibras: Number\n        grupo: String\n    }\n\n    class recipes {\n        _id: ObjectId\n        nome: String\n        instrucoes: String\n        tempo_preparo: Number\n        dificuldade: String\n        calorias: Number\n        ingredientes: Array~IngredienteRef~\n    }\n\n    class IngredienteRef {\n        food_id: ObjectId\n        quantidade: String\n    }\n\n    class dietPlans {\n        _id: ObjectId\n        nome: String\n        descricao: String\n        objetivo: String\n        duracao: Number\n        calorias_diarias: Number\n        macronutrientes: Object\n        nutricionista_id: ObjectId\n        paciente_id: ObjectId\n        alimentos_recomendados: Array~ObjectId~\n        receitas_recomendadas: Array~ObjectId~\n    }\n\n    class meals {\n        _id: ObjectId\n        tipo: String\n        data: Date\n        hora: String\n        paciente_id: ObjectId\n        calorias: Number\n        adesao: String\n        registro_foto: Boolean\n        alimentos: Array~ObjectId~\n        receitas: Array~ObjectId~\n    }\n\n    class measurements {\n        _id: ObjectId\n        paciente_id: ObjectId\n        data: Date\n        peso: Number\n        imc: Number\n        gordura_corporal: Number\n        medidas: Object\n        pressao: String\n    }\n\n    class MedidasObject {\n        cintura: Number\n        quadril: Number\n    }\n\n    class messages {\n        _id: ObjectId\n        de_id: ObjectId\n        de_tipo: String\n        para_id: ObjectId\n        para_tipo: String\n        conteudo: String\n        data: Date\n        hora: String\n        lida: Boolean\n    }\n\n    class appointments {\n        _id: ObjectId\n        nutricionista_id: ObjectId\n        paciente_id: ObjectId\n        data: Date\n        hora: String\n        status: String\n        notas: String\n    }\n\n    %% Relacionamentos de Refer\u00eancia\n    recipes *-- IngredienteRef\n    measurements *-- MedidasObject\n\n    patients --&gt; nutritionists : nutricionista_id\n    dietPlans --&gt; nutritionists : nutricionista_id\n    dietPlans --&gt; patients : paciente_id\n    dietPlans --&gt; foods : alimentos_recomendados\n    dietPlans --&gt; recipes : receitas_recomendadas\n    recipes --&gt; foods : ingredientes.food_id\n    meals --&gt; patients : paciente_id\n    meals --&gt; foods : alimentos\n    meals --&gt; recipes : receitas\n    measurements --&gt; patients : paciente_id\n    messages --&gt; nutritionists : de_id / para_id\n    messages --&gt; patients : de_id / para_id\n    appointments --&gt; nutritionists : nutricionista_id\n    appointments --&gt; patients : paciente_id</code></pre>"},{"location":"modelagem/documentos/#colecoes-e-documentos","title":"Cole\u00e7\u00f5es e Documentos","text":"<p>O modelo utiliza as seguintes cole\u00e7\u00f5es:</p>"},{"location":"modelagem/documentos/#nutritionists","title":"nutritionists","text":"<p>Armazena informa\u00e7\u00f5es sobre os nutricionistas.</p> <pre><code>{\n  \"_id\": 1,\n  \"nome\": \"Ana Silva\",\n  \"especialidade\": \"Nutri\u00e7\u00e3o Esportiva\",\n  \"experiencia\": 8,\n  \"email\": \"ana@nutri.com\",\n  \"telefone\": \"21-99999-1111\"\n}\n</code></pre>"},{"location":"modelagem/documentos/#patients","title":"patients","text":"<p>Armazena informa\u00e7\u00f5es sobre os pacientes, incluindo refer\u00eancia ao nutricionista que os atende.</p> <pre><code>{\n  \"_id\": 1,\n  \"nome\": \"Jo\u00e3o Pereira\",\n  \"idade\": 35,\n  \"genero\": \"M\",\n  \"altura\": 178,\n  \"peso_inicial\": 92,\n  \"email\": \"joao@email.com\",\n  \"telefone\": \"21-88888-1111\",\n  \"restricoes\": [\"Gl\u00faten\"],\n  \"alergias\": [\"Amendoim\"],\n  \"objetivo\": \"Emagrecimento\",\n  \"nutricionista_id\": 1\n}\n</code></pre>"},{"location":"modelagem/documentos/#foods","title":"foods","text":"<p>Cadastro de alimentos com informa\u00e7\u00f5es nutricionais.</p> <pre><code>{\n  \"_id\": 1,\n  \"nome\": \"Ma\u00e7\u00e3\",\n  \"porcao\": \"1 unidade (150g)\",\n  \"calorias\": 95,\n  \"proteinas\": 0.5,\n  \"carboidratos\": 25,\n  \"gorduras\": 0.3,\n  \"fibras\": 4.4,\n  \"grupo\": \"Frutas\"\n}\n</code></pre>"},{"location":"modelagem/documentos/#recipes","title":"recipes","text":"<p>Receitas com ingredientes e instru\u00e7\u00f5es.</p> <pre><code>{\n  \"_id\": 1,\n  \"nome\": \"Salada de Frango com Abacate\",\n  \"instrucoes\": \"Corte o peito de frango em cubos e grelhe. Misture com abacate, tomate e folhas verdes. Tempere com azeite, lim\u00e3o e sal.\",\n  \"tempo_preparo\": 20,\n  \"dificuldade\": \"F\u00e1cil\",\n  \"calorias\": 320,\n  \"ingredientes\": [\n    {\"food_id\": 2, \"quantidade\": \"100g\"},\n    {\"food_id\": 4, \"quantidade\": \"50g\"},\n    {\"food_id\": 9, \"quantidade\": \"5ml\"}\n  ]\n}\n</code></pre>"},{"location":"modelagem/documentos/#dietplans","title":"dietPlans","text":"<p>Planos alimentares com refer\u00eancias a pacientes, nutricionistas e alimentos/receitas recomendados.</p> <pre><code>{\n  \"_id\": a1,\n  \"nome\": \"Emagrecimento Saud\u00e1vel\",\n  \"descricao\": \"Plano focado em d\u00e9ficit cal\u00f3rico moderado com alimentos nutritivos\",\n  \"objetivo\": \"Perda de peso\",\n  \"duracao\": 90,\n  \"calorias_diarias\": 1800,\n  \"macronutrientes\": {\n    \"proteinas\": \"30%\",\n    \"carboidratos\": \"40%\",\n    \"gorduras\": \"30%\"\n  },\n  \"nutricionista_id\": 1,\n  \"paciente_id\": 1,\n  \"alimentos_recomendados\": [2, 3, 4],\n  \"receitas_recomendadas\": [1, 5]\n}\n</code></pre>"},{"location":"modelagem/documentos/#meals","title":"meals","text":"<p>Refei\u00e7\u00f5es consumidas pelos pacientes.</p> <pre><code>{\n  \"_id\": 1,\n  \"tipo\": \"Caf\u00e9 da manh\u00e3\",\n  \"data\": ISODate(\"2023-10-18T00:00:00Z\"),\n  \"hora\": \"08:00\",\n  \"paciente_id\": 1,\n  \"calorias\": 320,\n  \"adesao\": \"Completa\",\n  \"registro_foto\": true,\n  \"alimentos\": [],\n  \"receitas\": [4]\n}\n</code></pre>"},{"location":"modelagem/documentos/#measurements","title":"measurements","text":"<p>Hist\u00f3rico de medidas corporais dos pacientes.</p> <pre><code>{\n  \"_id\": 1,\n  \"paciente_id\": 1,\n  \"data\": ISODate(\"2023-09-15T00:00:00Z\"),\n  \"peso\": 92,\n  \"imc\": 29.1,\n  \"gordura_corporal\": 28,\n  \"medidas\": {\n    \"cintura\": 102,\n    \"quadril\": 106\n  },\n  \"pressao\": \"130/85\"\n}\n</code></pre>"},{"location":"modelagem/documentos/#messages","title":"messages","text":"<p>Comunica\u00e7\u00f5es entre pacientes e nutricionistas.</p> <pre><code>{\n  \"_id\": 1,\n  \"de_id\": 1,\n  \"de_tipo\": \"nutricionista\",\n  \"para_id\": 1,\n  \"para_tipo\": \"paciente\",\n  \"conteudo\": \"Como est\u00e1 se sentindo com a nova dieta?\",\n  \"data\": ISODate(\"2023-10-15T00:00:00Z\"),\n  \"hora\": \"14:30\",\n  \"lida\": true\n}\n</code></pre>"},{"location":"modelagem/documentos/#appointments","title":"appointments","text":"<p>Consultas agendadas e realizadas.</p> <pre><code>{\n  \"_id\": 1,\n  \"nutricionista_id\": 1,\n  \"paciente_id\": 1,\n  \"data\": ISODate(\"2023-09-15T00:00:00Z\"),\n  \"hora\": \"14:00\",\n  \"status\": \"Realizada\",\n  \"notas\": \"Avalia\u00e7\u00e3o inicial e defini\u00e7\u00e3o de plano alimentar\"\n}\n</code></pre>"},{"location":"modelagem/documentos/#estrategias-de-modelagem","title":"Estrat\u00e9gias de Modelagem","text":"<p>No modelo MongoDB, utilizamos algumas estrat\u00e9gias espec\u00edficas:</p>"},{"location":"modelagem/documentos/#1-referencias-vs-embutimento","title":"1. Refer\u00eancias vs. Embutimento","text":"<ul> <li>Refer\u00eancias: Utilizamos IDs para relacionar documentos entre cole\u00e7\u00f5es (ex: <code>nutricionista_id</code> em <code>patients</code>).</li> <li>Embutimento: Utilizamos documentos embutidos para dados que s\u00e3o acessados em conjunto frequentemente (ex: <code>medidas</code> em <code>measurements</code>).</li> </ul>"},{"location":"modelagem/documentos/#2-arrays-de-referencias","title":"2. Arrays de Refer\u00eancias","text":"<p>Para rela\u00e7\u00f5es de muitos-para-muitos, utilizamos arrays de IDs: - <code>alimentos_recomendados</code> e <code>receitas_recomendadas</code> em <code>dietPlans</code> - <code>alimentos</code> e <code>receitas</code> em <code>meals</code></p>"},{"location":"modelagem/documentos/#3-objetos-para-dados-complexos","title":"3. Objetos para Dados Complexos","text":"<p>Para dados estruturados que pertencem logicamente a um \u00fanico documento: - <code>macronutrientes</code> em <code>dietPlans</code> - <code>medidas</code> em <code>measurements</code></p>"},{"location":"modelagem/documentos/#4-tipos-discriminados","title":"4. Tipos Discriminados","text":"<p>Para mensagens, usamos campos discriminadores para identificar o tipo: - <code>de_tipo</code> e <code>para_tipo</code> em <code>messages</code> (pode ser \"nutricionista\" ou \"paciente\")</p>"},{"location":"modelagem/documentos/#vantagens-do-modelo-de-documentos","title":"Vantagens do Modelo de Documentos","text":"<ul> <li>Esquema flex\u00edvel: Facilidade para evoluir o modelo sem migra\u00e7\u00f5es complexas</li> <li>Documentos auto-contidos: Redu\u00e7\u00e3o de JOINs para opera\u00e7\u00f5es comuns</li> <li>Estruturas aninhadas: Representa\u00e7\u00e3o natural de dados hier\u00e1rquicos</li> <li>Consultas poderosas: Framework de agrega\u00e7\u00e3o para an\u00e1lises complexas</li> <li>Escalonamento horizontal: Facilidade para distribuir dados em clusters</li> </ul> <p>Este modelo de documentos nos permite armazenar e consultar eficientemente os dados do sistema de acompanhamento de dietas, especialmente quando precisamos:</p> <ul> <li>Recuperar todas as informa\u00e7\u00f5es de um paciente em uma \u00fanica opera\u00e7\u00e3o</li> <li>Armazenar estruturas complexas como ingredientes de receitas</li> <li>Realizar an\u00e1lises agregadas sobre medidas corporais ou consumo alimentar</li> <li>Flexibilidade para adicionar novos campos ou tipos de dados no futuro</li> </ul> <p>A capacidade do MongoDB de consultar e agregar dados de forma eficiente o torna uma escolha excelente para esta aplica\u00e7\u00e3o.</p>"},{"location":"modelagem/grafos/","title":"Modelo de Grafos (Neo4j)","text":"<p>O modelo de grafos para nosso Sistema de Acompanhamento de Dietas utiliza o Neo4j, um banco de dados baseado em grafos que representa os dados como n\u00f3s (entidades) e relacionamentos (arestas). Esta representa\u00e7\u00e3o \u00e9 particularmente adequada para nosso dom\u00ednio, pois permite modelar facilmente as complexas rela\u00e7\u00f5es entre nutricionistas, pacientes, planos alimentares, receitas, etc.</p>"},{"location":"modelagem/grafos/#diagrama-do-modelo","title":"Diagrama do Modelo","text":"<p>O diagrama abaixo ilustra o modelo de dados em formato de grafo:</p> <pre><code>classDiagram\n    class Nutricionista {\n        id: Integer\n        nome: String\n        especialidade: String\n        experiencia: Integer\n        email: String\n        telefone: String\n    }\n\n    class Paciente {\n        id: Integer\n        nome: String\n        idade: Integer\n        genero: String\n        altura: Integer\n        peso_inicial: Float\n        email: String\n        telefone: String\n        restricoes: String[]\n        alergias: String[]\n        objetivo: String\n    }\n\n    class PlanoAlimentar {\n        id: Integer\n        nome: String\n        descricao: String\n        objetivo: String\n        duracao: Integer\n        calorias_diarias: Integer\n        proteinas: String\n        carboidratos: String\n        gorduras: String\n    }\n\n    class Alimento {\n        id: Integer\n        nome: String\n        porcao: String\n        calorias: Integer\n        proteinas: Float\n        carboidratos: Float\n        gorduras: Float\n        fibras: Float\n        grupo: String\n    }\n\n    class Receita {\n        id: Integer\n        nome: String\n        instrucoes: String\n        tempo_preparo: Integer\n        dificuldade: String\n        calorias: Integer\n    }\n\n    class Refeicao {\n        id: Integer\n        tipo: String\n        data: String\n        hora: String\n        calorias: Integer\n        adesao: String\n        registro_foto: Boolean\n    }\n\n    class MedidaCorporal {\n        id: Integer\n        data: String\n        peso: Float\n        imc: Float\n        gordura_corporal: Float\n        cintura: Integer\n        quadril: Integer\n        pressao: String\n    }\n\n    class Mensagem {\n        id: Integer\n        conteudo: String\n        data: String\n        hora: String\n        lida: Boolean\n    }\n\n    class Consulta {\n        id: Integer\n        data: String\n        hora: String\n        status: String\n        notas: String\n    }\n\n    %% Relacionamentos\n    Nutricionista --|&gt; Paciente : ATENDE\n    Nutricionista --|&gt; PlanoAlimentar : CRIA\n    Paciente --|&gt; PlanoAlimentar : SEGUE\n    PlanoAlimentar --|&gt; Alimento : INCLUI\n    PlanoAlimentar --|&gt; Receita : RECOMENDA\n    Receita --|&gt; Alimento : CONTEM\n    Paciente --|&gt; Refeicao : CONSOME\n    Refeicao --|&gt; Alimento : INCLUI\n    Refeicao --|&gt; Receita : INCLUI\n    Paciente --|&gt; MedidaCorporal : POSSUI\n    Nutricionista --|&gt; Mensagem : ENVIA\n    Paciente --|&gt; Mensagem : ENVIA\n    Mensagem --|&gt; Nutricionista : PARA\n    Mensagem --|&gt; Paciente : PARA\n    Paciente --|&gt; Consulta : AGENDA\n    Consulta --|&gt; Nutricionista : COM</code></pre>"},{"location":"modelagem/grafos/#nos-entidades","title":"N\u00f3s (Entidades)","text":"<p>O modelo define os seguintes tipos de n\u00f3s:</p>"},{"location":"modelagem/grafos/#nutricionista","title":"Nutricionista","text":"<p>Profissionais que orientam os pacientes <pre><code>CREATE (n:Nutricionista {\n    id: 1, \n    nome: \"Ana Silva\", \n    especialidade: \"Nutri\u00e7\u00e3o Esportiva\", \n    experiencia: 8, \n    email: \"ana@nutri.com\", \n    telefone: \"21-99999-1111\"\n})\n</code></pre></p>"},{"location":"modelagem/grafos/#paciente","title":"Paciente","text":"<p>Pessoas que buscam orienta\u00e7\u00e3o nutricional <pre><code>CREATE (p:Paciente {\n    id: 1, \n    nome: \"Jo\u00e3o Pereira\", \n    idade: 35, \n    genero: \"M\", \n    altura: 178, \n    peso_inicial: 92, \n    email: \"joao@email.com\", \n    telefone: \"21-88888-1111\", \n    restricoes: [\"Gl\u00faten\"], \n    alergias: [\"Amendoim\"], \n    objetivo: \"Emagrecimento\"\n})\n</code></pre></p>"},{"location":"modelagem/grafos/#planoalimentar","title":"PlanoAlimentar","text":"<p>Dietas elaboradas para os pacientes <pre><code>CREATE (pa:PlanoAlimentar {\n    id: 1, \n    nome: \"Emagrecimento Saud\u00e1vel\", \n    descricao: \"Plano focado em d\u00e9ficit cal\u00f3rico moderado com alimentos nutritivos\", \n    objetivo: \"Perda de peso\", \n    duracao: 90, \n    calorias_diarias: 1800, \n    proteinas: \"30%\", \n    carboidratos: \"40%\", \n    gorduras: \"30%\"\n})\n</code></pre></p>"},{"location":"modelagem/grafos/#alimento","title":"Alimento","text":"<p>Itens alimentares b\u00e1sicos com informa\u00e7\u00f5es nutricionais <pre><code>CREATE (a:Alimento {\n    id: 1, \n    nome: \"Ma\u00e7\u00e3\", \n    porcao: \"1 unidade (150g)\", \n    calorias: 95, \n    proteinas: 0.5, \n    carboidratos: 25, \n    gorduras: 0.3, \n    fibras: 4.4, \n    grupo: \"Frutas\"\n})\n</code></pre></p>"},{"location":"modelagem/grafos/#receita","title":"Receita","text":"<p>Combina\u00e7\u00f5es de alimentos com instru\u00e7\u00f5es de preparo <pre><code>CREATE (r:Receita {\n    id: 1, \n    nome: \"Salada de Frango com Abacate\", \n    instrucoes: \"Corte o peito de frango em cubos e grelhe. Misture com abacate, tomate e folhas verdes. Tempere com azeite, lim\u00e3o e sal.\", \n    tempo_preparo: 20, \n    dificuldade: \"F\u00e1cil\", \n    calorias: 320\n})\n</code></pre></p>"},{"location":"modelagem/grafos/#refeicao","title":"Refeicao","text":"<p>Registros de alimenta\u00e7\u00e3o dos pacientes <pre><code>CREATE (ref:Refeicao {\n    id: 1, \n    tipo: \"Caf\u00e9 da manh\u00e3\", \n    data: \"2023-10-18\", \n    hora: \"08:00\", \n    calorias: 320, \n    adesao: \"Completa\", \n    registro_foto: true\n})\n</code></pre></p>"},{"location":"modelagem/grafos/#medidacorporal","title":"MedidaCorporal","text":"<p>Hist\u00f3rico de medi\u00e7\u00f5es (peso, IMC, etc.) <pre><code>CREATE (m:MedidaCorporal {\n    id: 1, \n    data: \"2023-09-15\", \n    peso: 92, \n    imc: 29.1, \n    gordura_corporal: 28, \n    cintura: 102, \n    quadril: a106, \n    pressao: \"130/85\"\n})\n</code></pre></p>"},{"location":"modelagem/grafos/#mensagem","title":"Mensagem","text":"<p>Comunica\u00e7\u00f5es entre nutricionistas e pacientes <pre><code>CREATE (msg:Mensagem {\n    id: 1, \n    conteudo: \"Como est\u00e1 se sentindo com a nova dieta?\", \n    data: \"2023-10-15\", \n    hora: \"14:30\", \n    lida: true\n})\n</code></pre></p>"},{"location":"modelagem/grafos/#consulta","title":"Consulta","text":"<p>Agendamentos de atendimentos <pre><code>CREATE (c:Consulta {\n    id: 1, \n    data: \"2023-09-15\", \n    hora: \"14:00\", \n    status: \"Realizada\", \n    notas: \"Avalia\u00e7\u00e3o inicial e defini\u00e7\u00e3o de plano alimentar\"\n})\n</code></pre></p>"},{"location":"modelagem/grafos/#relacionamentos","title":"Relacionamentos","text":"<p>Os relacionamentos modelam as conex\u00f5es entre os n\u00f3s:</p> <ol> <li> <p>ATENDE: Nutricionista \u2192 Paciente    <pre><code>MATCH (n:Nutricionista {id: 1}), (p:Paciente {id: 1})\nCREATE (n)-[:ATENDE]-&gt;(p)\n</code></pre></p> </li> <li> <p>CRIA: Nutricionista \u2192 PlanoAlimentar    <pre><code>MATCH (n:Nutricionista {id: 1}), (pa:PlanoAlimentar {id: 1})\nCREATE (n)-[:CRIA]-&gt;(pa)\n</code></pre></p> </li> <li> <p>SEGUE: Paciente \u2192 PlanoAlimentar    <pre><code>MATCH (p:Paciente {id: 1}), (pa:PlanoAlimentar {id: 1})\nCREATE (p)-[:SEGUE]-&gt;(pa)\n</code></pre></p> </li> <li> <p>INCLUI: PlanoAlimentar \u2192 Alimento    <pre><code>MATCH (pa:PlanoAlimentar {id: 1}), (a:Alimento {id: 2})\nCREATE (pa)-[:INCLUI]-&gt;(a)\n</code></pre></p> </li> <li> <p>RECOMENDA: PlanoAlimentar \u2192 Receita    <pre><code>MATCH (pa:PlanoAlimentar {id: 1}), (r:Receita {id: 1})\nCREATE (pa)-[:RECOMENDA]-&gt;(r)\n</code></pre></p> </li> <li> <p>CONTEM: Receita \u2192 Alimento    <pre><code>MATCH (r:Receita {id: 1}), (a:Alimento {id: 2})\nCREATE (r)-[:CONTEM {quantidade: \"100g\"}]-&gt;(a)\n</code></pre></p> </li> <li> <p>CONSOME: Paciente \u2192 Refeicao    <pre><code>MATCH (p:Paciente {id: 1}), (r:Refeicao {id: 1})\nCREATE (p)-[:CONSOME]-&gt;(r)\n</code></pre></p> </li> <li> <p>INCLUI: Refeicao \u2192 (Alimento | Receita)    <pre><code>MATCH (ref:Refeicao {id: 1}), (r:Receita {id: 4})\nCREATE (ref)-[:INCLUI]-&gt;(r)\n</code></pre></p> </li> <li> <p>POSSUI: Paciente \u2192 MedidaCorporal    <pre><code>MATCH (p:Paciente {id: 1}), (m:MedidaCorporal {id: 1})\nCREATE (p)-[:POSSUI]-&gt;(m)\n</code></pre></p> </li> <li> <p>ENVIA/PARA: Mensagens entre Nutricionista e Paciente     <pre><code>MATCH (n:Nutricionista {id: 1}), (msg:Mensagem {id: 1}), (p:Paciente {id: 1})\nCREATE (n)-[:ENVIA]-&gt;(msg)-[:PARA]-&gt;(p)\n</code></pre></p> </li> <li> <p>AGENDA/COM: Consultas entre Paciente e Nutricionista     <pre><code>MATCH (p:Paciente {id: 1}), (c:Consulta {id: A1}), (n:Nutricionista {id: 1})\nCREATE (p)-[:AGENDA]-&gt;(c)-[:COM]-&gt;(n)\n</code></pre></p> </li> </ol>"},{"location":"modelagem/grafos/#vantagens-do-modelo-de-grafos","title":"Vantagens do Modelo de Grafos","text":"<ul> <li>Navegabilidade natural: Facilidade para percorrer relacionamentos complexos</li> <li>Consultas de caminhos: Possibilidade de encontrar padr\u00f5es de relacionamento</li> <li>Desempenho em consultas relacionais: Boa performance para consultas que envolvem m\u00faltiplos relacionamentos</li> <li>Modelagem intuitiva: Representa\u00e7\u00e3o que se assemelha \u00e0 forma como pensamos sobre os dados</li> <li>Flexibilidade: Facilidade para adicionar novos tipos de n\u00f3s e relacionamentos</li> </ul> <p>Este modelo de grafos nos permite responder a perguntas complexas sobre o sistema de acompanhamento de dietas, como:</p> <ul> <li>Quais receitas s\u00e3o adequadas para pacientes com certas restri\u00e7\u00f5es alimentares?</li> <li>Qual o hist\u00f3rico de progresso de um paciente ao longo do tempo?</li> <li>Quais nutricionistas t\u00eam mais pacientes com objetivo de emagrecimento?</li> <li>Qual o padr\u00e3o de comunica\u00e7\u00e3o entre nutricionistas e pacientes?</li> </ul> <p>A capacidade do Neo4j de navegar relacionamentos de forma eficiente torna-o ideal para este tipo de aplica\u00e7\u00e3o.</p>"}]}